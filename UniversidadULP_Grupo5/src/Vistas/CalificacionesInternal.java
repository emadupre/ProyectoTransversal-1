/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas;

import manipuladoresDAO.AlumnoDAO;
import manipuladoresDAO.CalificacionDAO;
import manipuladoresDAO.InscripcionDAO;
import manipuladoresDAO.MateriaDAO;
import Modelo.Administrativo;
import Modelo.Alumno;
import Modelo.Calificacion;
import Modelo.Inscripcion;
import Modelo.Materia;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.YES_NO_OPTION;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Enzo_2
 */
public class CalificacionesInternal extends javax.swing.JInternalFrame {

    /**
     * Creates new form CalificacionesInternal
     */
    private AlumnoDAO maniAlum = new AlumnoDAO();
    private InscripcionDAO maniIns = new InscripcionDAO();
    private CalificacionDAO maniCal = new CalificacionDAO();
    private MateriaDAO maniMat = new MateriaDAO();
    int seleccionAlumno = -1;
    int seleccionInscripcion = -1;
    int seleccionCalificacion = -1;
    List<Alumno> listaAlumnos;
    List<Inscripcion> listaInscripciones;
    private Administrativo usuario;

    public CalificacionesInternal(Administrativo usuario) {
        this.usuario = usuario;
        initComponents();
        armarCabeceras();
        rellenarTablaAlumno();
        agregarListenerTablaAlumnos();
        agregarListenerTablaInscripciones();
        agregarListenerTablaCalificaciones();
        txtTipoEvaluacion.setEnabled(false);
        txtCalificacion.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlCalificacion = new javax.swing.JPanel();
        pnlAlumnos = new javax.swing.JPanel();
        txtBuscarAlumno = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAlumnos = new javax.swing.JTable();
        pnlInscripciones = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblInscripciones = new javax.swing.JTable();
        pnlCalificaciones = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblCalificaciones = new javax.swing.JTable();
        btnAgregar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        txtTipoEvaluacion = new javax.swing.JTextField();
        txtCalificacion = new javax.swing.JTextField();
        checkEdicion = new javax.swing.JCheckBox();
        pnlSeleccion = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtAlumnoS = new javax.swing.JTextField();
        txtMateriaS = new javax.swing.JTextField();
        txtEstadoS = new javax.swing.JTextField();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlCalificacion.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtBuscarAlumno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscarAlumnoKeyReleased(evt);
            }
        });

        jLabel3.setText("Buscar por DNI:");

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setText("Alumnos");

        tblAlumnos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tblAlumnos);

        javax.swing.GroupLayout pnlAlumnosLayout = new javax.swing.GroupLayout(pnlAlumnos);
        pnlAlumnos.setLayout(pnlAlumnosLayout);
        pnlAlumnosLayout.setHorizontalGroup(
            pnlAlumnosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAlumnosLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(pnlAlumnosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAlumnosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAlumnosLayout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addComponent(txtBuscarAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );
        pnlAlumnosLayout.setVerticalGroup(
            pnlAlumnosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAlumnosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(2, 2, 2)
                .addComponent(jLabel3)
                .addGap(7, 7, 7)
                .addComponent(txtBuscarAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pnlCalificacion.add(pnlAlumnos, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 360, 560));

        pnlInscripciones.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setText("Inscripciones");
        pnlInscripciones.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, -1, -1));

        tblInscripciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(tblInscripciones);

        pnlInscripciones.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 270, 500));

        pnlCalificacion.add(pnlInscripciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 0, 290, 560));

        pnlCalificaciones.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel5.setText("Calificaciones");
        pnlCalificaciones.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 140, 114, 24));

        tblCalificaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(tblCalificaciones);

        pnlCalificaciones.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 168, 330, 260));

        btnAgregar.setText("Agregar calificación");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });
        pnlCalificaciones.add(btnAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(194, 6, 151, -1));

        btnEliminar.setText("Eliminar calificación");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        pnlCalificaciones.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(194, 94, 151, -1));

        btnModificar.setText("Modificar calificación");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        pnlCalificaciones.add(btnModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(194, 50, -1, -1));

        txtTipoEvaluacion.setBorder(javax.swing.BorderFactory.createTitledBorder("Tipo evaluación"));
        pnlCalificaciones.add(txtTipoEvaluacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 160, -1));

        txtCalificacion.setBorder(javax.swing.BorderFactory.createTitledBorder("Calificación\n"));
        pnlCalificaciones.add(txtCalificacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 160, -1));

        checkEdicion.setText("Habilitar modificación");
        checkEdicion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkEdicionActionPerformed(evt);
            }
        });
        pnlCalificaciones.add(checkEdicion, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 160, -1));

        pnlCalificacion.add(pnlCalificaciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 120, 350, 430));

        jLabel6.setText("Alumno:");

        jLabel7.setText("Materia:");

        jLabel9.setText("Estado inscripción:");

        txtAlumnoS.setEditable(false);

        txtMateriaS.setEditable(false);

        txtEstadoS.setEditable(false);

        javax.swing.GroupLayout pnlSeleccionLayout = new javax.swing.GroupLayout(pnlSeleccion);
        pnlSeleccion.setLayout(pnlSeleccionLayout);
        pnlSeleccionLayout.setHorizontalGroup(
            pnlSeleccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSeleccionLayout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(pnlSeleccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlSeleccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtAlumnoS, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                    .addComponent(txtMateriaS, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtEstadoS, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        pnlSeleccionLayout.setVerticalGroup(
            pnlSeleccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSeleccionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSeleccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtAlumnoS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlSeleccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtMateriaS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlSeleccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtEstadoS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pnlCalificacion.add(pnlSeleccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 0, 330, 110));

        getContentPane().add(pnlCalificacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        try {
            int seleccion = JOptionPane.showConfirmDialog(this, "¿Esta seguro que sea eliminar esta calificacion?", "CONFIRMACION", YES_NO_OPTION);
            if (seleccion == 0) {
                maniCal.eliminar(seleccionCalificacion);
                JOptionPane.showMessageDialog(this, "Materia eliminada con exito.");
                rellenarTablaCalificaciones(seleccionInscripcion);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al eliminar la calificacion.");
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        String tipo = txtTipoEvaluacion.getText();
        String calificacion = txtCalificacion.getText();

        if (tipo.isEmpty() || calificacion.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Faltan campos que rellenar.");
            return;
        }
        try {
            Double calificacionParseada = Double.parseDouble(calificacion);
            Calificacion cal = new Calificacion(calificacionParseada, tipo);
            maniCal.actualizarPorID(seleccionCalificacion, cal);
            JOptionPane.showMessageDialog(this, "Calificación actualizada con éxito");
            rellenarTablaCalificaciones(seleccionInscripcion);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Debe ingresar una calificación valida");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al modificar la calificación");
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void checkEdicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkEdicionActionPerformed
        if (checkEdicion.isSelected()) {
            txtTipoEvaluacion.setEnabled(true);
            txtCalificacion.setEnabled(true);
        } else {
            txtTipoEvaluacion.setEnabled(false);
            txtCalificacion.setEnabled(false);
        }
    }//GEN-LAST:event_checkEdicionActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        int filaS = tblInscripciones.getSelectedRow();
        if (filaS > -1) {
            try {
                String nombreMateria = (String) tblInscripciones.getValueAt(filaS, 2);
                JFrame padre = (JFrame) SwingUtilities.getWindowAncestor(this);
                DialogCalificacion ventanaAgregar = new DialogCalificacion(padre, true, nombreMateria, seleccionInscripcion, usuario.getId_administrativo(), seleccionAlumno);
                ventanaAgregar.setVisible(true);
            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(this, "Seleccione una inscripcion y un alumno a la cual agregarle una calificación.");
            } catch (Exception a){
                JOptionPane.showMessageDialog(this, "Error al abrir ventana de agregar calificación.");
                a.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void txtBuscarAlumnoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarAlumnoKeyReleased
        String caracterDNI = txtBuscarAlumno.getText();
        DefaultTableModel modelo = (DefaultTableModel) tblAlumnos.getModel();
        modelo.setRowCount(0);
        try {
            for (Alumno a : listaAlumnos) {
                String dni = Integer.toString(a.getDni());
                if (dni.startsWith(caracterDNI)) {
                    modelo.addRow(new Object[]{
                        a.getId_alumno(), a.getDni(), a.getNombre(),
                        a.getApellido(), VistaLogin.parsearBooleanaString(a.isEstado())
                    });
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_txtBuscarAlumnoKeyReleased

    private void armarCabeceras() {
        String[] cabeceraAlumnos = {"id_alumno", "DNI", "Nombre", "Apellido", "Estado"};
        String[] cabeceraInscripciones = {"id_inscripcion", "id_materia", "Materia", "Estado"};
        String[] cabeceraCalificaciones = {"id_calificacion", "Tipo de evaluación", "Calificación", "Fecha de modificación"};

        Object[] cabeceras = {cabeceraAlumnos, cabeceraInscripciones, cabeceraCalificaciones};
        JTable[] modelos = {tblAlumnos, tblInscripciones, tblCalificaciones};
        for (int i = 0; i < modelos.length; i++) {
            String[] cabeceraActual = (String[]) cabeceras[i];
            DefaultTableModel model = new DefaultTableModel(null, cabeceraActual) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };
            modelos[i].setModel(model);
            TableColumnModel columnM = modelos[i].getColumnModel();
            if (i == 1) {
                TableColumn columna0 = columnM.getColumn(0);
                TableColumn columna1 = columnM.getColumn(1);
                TableColumn columna2 = columnM.getColumn(2);
                columna0.setMinWidth(0);
                columna0.setMaxWidth(0);
                columna0.setPreferredWidth(0);
                columna0.setResizable(false);
                columna1.setMinWidth(0);
                columna1.setMaxWidth(0);
                columna1.setPreferredWidth(0);
                columna1.setResizable(false);
                columna2.setMinWidth(200);
                columna2.setMaxWidth(200);
                columna2.setPreferredWidth(200);

            }
            TableColumn column0 = columnM.getColumn(0);
            column0.setMinWidth(0);
            column0.setMaxWidth(0);
            column0.setPreferredWidth(0);
            column0.setResizable(false);

        }

    }

    private void rellenarTablaAlumno() {
        DefaultTableModel modelo = (DefaultTableModel) tblAlumnos.getModel();
        modelo.setRowCount(0);
        listaAlumnos = maniAlum.listar();
        for (Alumno a : listaAlumnos) {
            modelo.addRow(new Object[]{
                a.getId_alumno(), a.getDni(), a.getNombre(),
                a.getApellido(), VistaLogin.parsearBooleanaString(a.isEstado())
            });

        }
    }

    private void rellenarTablaInscripciones(int idAlumno) {
        listaInscripciones = maniIns.listarInscripcionesPorAlumno(idAlumno);
        List<Materia> listaMaterias = maniMat.listar();
        DefaultTableModel modelo = (DefaultTableModel) tblInscripciones.getModel();
        modelo.setRowCount(0);
        for (Inscripcion i : listaInscripciones) {
            for (Materia m : listaMaterias) {
                if (i.getId_materia() == m.getId_materia()) {
                    modelo.addRow(new Object[]{
                        i.getId_inscripcion(), m.getId_materia(), m.getNombre(), VistaLogin.parsearBooleanaString(i.isEstado())
                    });

                }
            }
        }
    }

    private void rellenarTablaCalificaciones(int idIns) {
        List<Calificacion> listaCalificaciones = maniCal.listarPorIdInscripcion(idIns);
        DefaultTableModel modelo = (DefaultTableModel) tblCalificaciones.getModel();
        modelo.setRowCount(0);
        for (Calificacion c : listaCalificaciones) {
            modelo.addRow(new Object[]{
                c.getId_calificacion(), c.getTipoEvaluacion(), c.getCalificacion(), c.getFechaModificacion().toString()
            });
        }
    }

    private void limpiarCamposAlumnoInscripcion() {
        txtMateriaS.setText("");
        txtEstadoS.setText("");
        txtAlumnoS.setText("");
    }

    private void agregarListenerTablaAlumnos() {
        tblAlumnos.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent evento) {
                if (evento.getValueIsAdjusting()) {
                    return;
                }
                int filaS = tblAlumnos.getSelectedRow();
                if (filaS > -1) {
                    seleccionAlumno = (int) tblAlumnos.getValueAt(filaS, 0);
                    rellenarTablaInscripciones(seleccionAlumno);
                    String nombre = (String) tblAlumnos.getValueAt(filaS, 2);
                    String apellido = (String) tblAlumnos.getValueAt(filaS, 3);
                    String dni = Integer.toString((int) tblAlumnos.getValueAt(filaS, 1));
                    txtAlumnoS.setText(dni + " - " + apellido + " " + nombre);

                } else {
                    DefaultTableModel modelo = (DefaultTableModel) tblInscripciones.getModel();
                    modelo.setRowCount(0);
                    limpiarCamposAlumnoInscripcion();
                }
            }
        });
    }

    private void agregarListenerTablaInscripciones() {
        tblInscripciones.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent evento) {
                if (evento.getValueIsAdjusting()) {
                    return;
                }
                int filaS = tblInscripciones.getSelectedRow();
                if (filaS > -1) {
                    seleccionInscripcion = (int) tblInscripciones.getValueAt(filaS, 0);
                    rellenarTablaCalificaciones(seleccionInscripcion);
                    String nombreMateria = (String) tblInscripciones.getValueAt(filaS, 2);
                    String estadoIns = (String) tblInscripciones.getValueAt(filaS, 3);
                    txtMateriaS.setText(nombreMateria);
                    txtEstadoS.setText(estadoIns);
                } else {
                    limpiarCamposAlumnoInscripcion();
                }
            }
        });

    }

    private void agregarListenerTablaCalificaciones() {
        tblCalificaciones.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent evento) {
                if (evento.getValueIsAdjusting()) {
                    return;
                }

                int filaS = tblCalificaciones.getSelectedRow();
                if (filaS > -1) {
                    seleccionCalificacion = (int) tblCalificaciones.getValueAt(filaS, 0);
                    btnEliminar.setEnabled(true);
                    btnModificar.setEnabled(true);
                    txtTipoEvaluacion.setText((String) tblCalificaciones.getValueAt(filaS, 1));
                    txtCalificacion.setText(Double.toString((double) tblCalificaciones.getValueAt(filaS, 2)));
                } else {
                    btnEliminar.setEnabled(false);
                    btnModificar.setEnabled(false);
                    txtTipoEvaluacion.setText("");
                    txtCalificacion.setText("");
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JCheckBox checkEdicion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPanel pnlAlumnos;
    private javax.swing.JPanel pnlCalificacion;
    private javax.swing.JPanel pnlCalificaciones;
    private javax.swing.JPanel pnlInscripciones;
    private javax.swing.JPanel pnlSeleccion;
    private javax.swing.JTable tblAlumnos;
    private javax.swing.JTable tblCalificaciones;
    private javax.swing.JTable tblInscripciones;
    private javax.swing.JTextField txtAlumnoS;
    private javax.swing.JTextField txtBuscarAlumno;
    private javax.swing.JTextField txtCalificacion;
    private javax.swing.JTextField txtEstadoS;
    private javax.swing.JTextField txtMateriaS;
    private javax.swing.JTextField txtTipoEvaluacion;
    // End of variables declaration//GEN-END:variables
}
